{"ast":null,"code":"class Node {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n    this.prev = null;\n  }\n}\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.curr = null;\n  }\n  append(data) {\n    const newNode = new Node(data);\n    if (!this.tail) {\n      this.head = this.tail = this.curr = newNode;\n    } else {\n      this.tail.next = newNode;\n      newNode.prev = this.tail;\n      this.tail = newNode;\n    }\n  }\n  goNext() {\n    if (this.curr && this.curr.next) {\n      this.curr = this.curr.next;\n      console.log(\"Current (forward):\", this.curr.data);\n    } else {\n      console.log(\"No next node or reached the end.\");\n    }\n  }\n  goBack() {\n    if (this.curr && this.curr.prev) {\n      this.curr = this.curr.prev;\n      console.log(\"Current (backward):\", this.curr.data);\n    } else {\n      console.log(\"No previous node or reached the start.\");\n    }\n  }\n  insertAtCurr(data) {\n    if (!this.curr) {\n      console.log(\"Cannot insert, current node is not defined.\");\n      return;\n    }\n    const newNode = new Node(data);\n    const nextNode = this.curr.next;\n    this.curr.next = newNode;\n    newNode.prev = this.curr;\n    newNode.next = nextNode;\n    if (nextNode) {\n      nextNode.prev = newNode;\n    }\n    if (this.curr === this.tail) {\n      this.tail = newNode;\n    }\n    console.log(\"Inserted at current position:\", data);\n  }\n  printList() {\n    let curr = this.head;\n    while (curr) {\n      console.log(curr.data);\n      curr = curr.next;\n    }\n  }\n}\nexport default DoublyLinkedList;","map":{"version":3,"names":["Node","constructor","data","next","prev","DoublyLinkedList","head","tail","curr","append","newNode","goNext","console","log","goBack","insertAtCurr","nextNode","printList"],"sources":["/home/ivy/projects/kpop-dance-inspo/src/DoublyLinkedList.js"],"sourcesContent":["class Node {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n}\n\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.curr = null;\n    }\n\n\n  append(data) {\n    const newNode = new Node(data);\n    if (!this.tail) {\n      this.head = this.tail = this.curr = newNode;\n    } else {\n      this.tail.next = newNode;\n      newNode.prev = this.tail;\n      this.tail = newNode;\n    }\n  }\n\n  goNext() {\n    if (this.curr && this.curr.next) {\n      this.curr = this.curr.next;\n      console.log(\"Current (forward):\", this.curr.data);\n    } else {\n      console.log(\"No next node or reached the end.\");\n    }\n  }\n\n  goBack() {\n    if (this.curr && this.curr.prev) {\n      this.curr = this.curr.prev;\n      console.log(\"Current (backward):\", this.curr.data);\n    } else {\n      console.log(\"No previous node or reached the start.\");\n    }\n  }\n\n  insertAtCurr(data) {\n    if (!this.curr) {\n      console.log(\"Cannot insert, current node is not defined.\");\n      return;\n    }\n\n    const newNode = new Node(data);\n    const nextNode = this.curr.next;\n\n    this.curr.next = newNode;\n    newNode.prev = this.curr;\n    newNode.next = nextNode;\n\n    if (nextNode) {\n      nextNode.prev = newNode;\n    }\n\n    if (this.curr === this.tail) {\n      this.tail = newNode;\n    }\n\n    console.log(\"Inserted at current position:\", data);\n  }\n\n  printList() {\n    let curr = this.head;\n    while (curr) {\n      console.log(curr.data);\n      curr = curr.next;\n    }\n  }\n}\n\n\nexport default DoublyLinkedList;"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACPC,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,IAAI,GAAG,IAAI;EACpB;AACJ;AAEA,MAAMC,gBAAgB,CAAC;EACnBJ,WAAWA,CAAA,EAAG;IACV,IAAI,CAACK,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,IAAI,GAAG,IAAI;EACpB;EAGFC,MAAMA,CAACP,IAAI,EAAE;IACX,MAAMQ,OAAO,GAAG,IAAIV,IAAI,CAACE,IAAI,CAAC;IAC9B,IAAI,CAAC,IAAI,CAACK,IAAI,EAAE;MACd,IAAI,CAACD,IAAI,GAAG,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,IAAI,GAAGE,OAAO;IAC7C,CAAC,MAAM;MACL,IAAI,CAACH,IAAI,CAACJ,IAAI,GAAGO,OAAO;MACxBA,OAAO,CAACN,IAAI,GAAG,IAAI,CAACG,IAAI;MACxB,IAAI,CAACA,IAAI,GAAGG,OAAO;IACrB;EACF;EAEAC,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAACH,IAAI,IAAI,IAAI,CAACA,IAAI,CAACL,IAAI,EAAE;MAC/B,IAAI,CAACK,IAAI,GAAG,IAAI,CAACA,IAAI,CAACL,IAAI;MAC1BS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACL,IAAI,CAACN,IAAI,CAAC;IACnD,CAAC,MAAM;MACLU,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACjD;EACF;EAEAC,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAACN,IAAI,IAAI,IAAI,CAACA,IAAI,CAACJ,IAAI,EAAE;MAC/B,IAAI,CAACI,IAAI,GAAG,IAAI,CAACA,IAAI,CAACJ,IAAI;MAC1BQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACL,IAAI,CAACN,IAAI,CAAC;IACpD,CAAC,MAAM;MACLU,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACvD;EACF;EAEAE,YAAYA,CAACb,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,CAACM,IAAI,EAAE;MACdI,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1D;IACF;IAEA,MAAMH,OAAO,GAAG,IAAIV,IAAI,CAACE,IAAI,CAAC;IAC9B,MAAMc,QAAQ,GAAG,IAAI,CAACR,IAAI,CAACL,IAAI;IAE/B,IAAI,CAACK,IAAI,CAACL,IAAI,GAAGO,OAAO;IACxBA,OAAO,CAACN,IAAI,GAAG,IAAI,CAACI,IAAI;IACxBE,OAAO,CAACP,IAAI,GAAGa,QAAQ;IAEvB,IAAIA,QAAQ,EAAE;MACZA,QAAQ,CAACZ,IAAI,GAAGM,OAAO;IACzB;IAEA,IAAI,IAAI,CAACF,IAAI,KAAK,IAAI,CAACD,IAAI,EAAE;MAC3B,IAAI,CAACA,IAAI,GAAGG,OAAO;IACrB;IAEAE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEX,IAAI,CAAC;EACpD;EAEAe,SAASA,CAAA,EAAG;IACV,IAAIT,IAAI,GAAG,IAAI,CAACF,IAAI;IACpB,OAAOE,IAAI,EAAE;MACXI,OAAO,CAACC,GAAG,CAACL,IAAI,CAACN,IAAI,CAAC;MACtBM,IAAI,GAAGA,IAAI,CAACL,IAAI;IAClB;EACF;AACF;AAGA,eAAeE,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}